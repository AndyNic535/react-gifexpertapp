{"version":3,"sources":["componentes/AddCategory.js","componentes/funciones-especificas/getGifs.js","componentes/GifGridItem.js","componentes/GifGrid.js","componentes/hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"oNAmBaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,KAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAKlB,SAEE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAtBkB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,aA8B/BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCC3CrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAWH,GAFxF,sBAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAiBfM,GAjBe,4CAAH,sDCFPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,0BAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EAElBlB,mBAAS,CAE/ByB,KAAM,GACNa,SAAS,IAL+B,mBAErCC,EAFqC,KAE9BC,EAF8B,KA6BxC,OApBJC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CAELf,KAAMkB,EACNL,SAAS,MAId,UAIZ,CAAEpB,IAEMqB,EDzB2BM,CAAc3B,GAAlCa,EAFqB,EAE3BN,KAAca,EAFa,EAEbA,QAEtB,OACI,qCACA,mCAAMpB,EAAN,OAEEoB,GAAW,mBAAGJ,UAAU,YAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEaH,EAAOJ,KAAK,SAAAC,GAAG,OACf,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEfjBiB,EAAe,WAAM,MAIM9C,mBAAS,CAAC,gBAJhB,mBAIvB+C,EAJuB,KAIXhD,EAJW,KAW9B,OACA,gCAEE,oBAAImC,UAAU,SAAd,sBACA,cAAC,EAAD,CAAanC,cAAeA,IAC5B,uBAEA,oBAAImC,UAAU,WAAd,SAEKa,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MC1BnB8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a7fedb1d.chunk.js","sourcesContent":["//----------------------------------------------------------------------------------------------------//\n\n//<< LLAMA LA FUNCION ADDCATEGORY QUE SERIA IGUAL A SETCATEGORIAS Y LUEGO CREARA UN ESPACIO EN MEMORIA \n//<< QUE SE LLAMARA INPUTVALUE QUE TENDRA UN VALOR DE STRING VACIO, LUEGO SE CREARA UNA FUNCION QUE ES \n//<< LLAMADA HANDLEINPUTCHANGUE QUE SERA IGUAL A E (QUE SERIA E DE ELEMENTO) QUE DESPUES MANDARA \n//<< AL SETINPUTVALUE (E.TARGET.VALUE) QUE SERIA LO QUE SE ESTA ESCRIBIENDO EN EL INPUT,DESPUE DE ESO \n//<< CREARA OTRA FUNCION LLAMADA HANDLESUBMIT QUE SERA IGUAL A E QUE HARA QUE EL SUBMIT NO CARGUE TODA\n//<< LA PAGINA CADA VEZ QUE SEA APRETADO. DESPUES SI EL LARGO DE LO QUE ESTA ESCRITO EN EL INPUTVALUE\n//<< ES MAYOR A 2 MANDARA SETCATEGORIAS CON EL VALOR DE INPUTVALUE AL ARREGLO CATEGORIAS Y LUEGO DE ESO\n//<< QUEDARA CON EL INPUTVALUE CON EL STRING VACIO, Y POR ULTIMO RETORNARA TODO ESTO EN EL INPUT QUE \n//<< QUE APLICAREMOS EN EL HTML(LO CUAL TENDRA TODAS ESTAS FUNCIONES COMO POR EJEMPLO: EL INPUT ES DE \n//<< TIPO TEXTO, EL IMPUT TENDRA EL VALOR DEL INPUTVALUE Y QUE ONCHANGE TENDRA VALOR Y LLAMARA A LA \n//<< FUNCION HANDLEINPUTCHANGE) >>//\n\n//----------------------------------------------------------------------------------------------------//\n\nimport React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategorias}) => {\n\n    const [inputValue, setInputValue] = useState(\" \"); // useState(); es undefine\n\n    const handleInputChange = (e) => {\n//        console.log(e.target.value)\n        setInputValue(e.target.value) // eso es lo que se esta escribiento en el input\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n//        console.log(\"Submir hecho\");\n\n        if (inputValue.trim().length > 2) {\n\n            setCategorias(cats => [inputValue, ...cats]);\n            setInputValue(\" \");\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n\n          <input \n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n          />   \n        \n        </form>\n\n    )\n}\n\n// Candado para tus codigos\n\nAddCategory.prototype = {\n    setCategorias: PropTypes.func.isRequired\n}\n//----------------------------------------------------------------------------------------------------//\n\n","//----------------------------------------------------------------------------------------------------//\n\n//<< ES LLAMADA LA FUNCION GETGIFS LA CUAL SERA IGUAL A CATEGORY, Y COMENZARA POR CREAR UN ESPACIO EN \n//<< MEMORIA QUE SE LLAMARA URL LO CUAL TENDRA DENTRO EL HTTPS API_KEY Y QUE ESTARA CON EL STRING DE QUE\n//<< AL BUSCAR SE APLICARA LO QUE ESTA EN LA CATEGORY, LUEGO HARA LA PROMESA DE LA PETICION DE LA URL \n//<< QUE SERA IGUAL AL ESPACIO EN MEMORIA LLAMADO RESP, LUEGP DE ESO HARA OTRA PROMESA QUE SERIA LA DE\n//<< RESP.JSON() QUE NOS SERVIRA PARA EXTRAER LA INFORMACION NESESARIA DE LAS IMAGENES, LUEGO CREAREMOS\n//<< UN ESPACIO EN MEMORIA LLAMADO GIFS LO CUAL SERIA IGUAL A TODO LO QUE TENGA LA DATA Y RETORNAREMOS\n//<< EN UN OBJETO QUE EXTRAERA EL ID,TITLE Y EL URL DE LA DATA, Y AL FINALIZAR ESTO RETONAREMOS EN EL\n//<< ESPACIO EN MEMORIA GIFS DANDONOS TODA LA INFO DE LOS GIFS >>//\n\n//----------------------------------------------------------------------------------------------------//\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=2Z8FUzgjzUTyrGXTaIQtJLRIQa4boL1E&q=${ encodeURI( category ) }&limit=10`;\n\n    const resp = await fetch(url);\n\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n\n    });\n\n return gifs;\n}\n//----------------------------------------------------------------------------------------------------//","//----------------------------------------------------------------------------------------------------//\n\n//<< LLAMA LA FUNCION GIFGRIDITEM QUE SERIA IGUAL AL TITLE Y URL EXTRAIDOS ANTERIORMENTE, COMENZARA A \n//<< CORRER LA FUNCION LA CUAL INMEDIATAMENTE RETORNARIA EN UN <DIV/> QUE MOSTRARA EN EL HTML ATRAVEZ \n//<< DE LA ETIQUETA IMG LOS GIFS QUE TENEMOS EN LOS URL Y LES MANDAREMOS LOS TITULOS DE CADA UNO,  \n//<< PARA QUE LOS MUESTRE EN EL HTML CON LA ETIQUETA <P/> >>//   \n\n//----------------------------------------------------------------------------------------------------//\n\nimport React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n    return (\n        <div className=\"card animate__heartBeat\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n//----------------------------------------------------------------------------------------------------//\n","//----------------------------------------------------------------------------------------------------//\n\n//<< LLAMADA LA FUNCION GIFGRID QUE ES IGUAL A CATEGORY, CREARA UN ESPACIO EN MEMORIA QUE SERIA UN \n//<< OBJETO QUE TENDRA DENTRO DATA:IMAGES, LOADING Y SERIA IGUAL A USEFETCHGIFS(CATEGORY) (LO CUAL \n//<< ESTAMOS LLAMANDO A ESTA FUNCION EN ESTA VARIABLE), LUEGO  RETORNARA LA FUNCION EN UN </> QUE\n//<< TENDRA DENTRO UNA ETIQUETA </H3> QUE MOSTRARA EN EL HTML LO QUE ESTA ESCRITO EN EL CATEGORY,\n//<< LUEGO CADA VEZ QUE LA PAGINA ESTE CARGANDO HARA SALTAR LO QUE ESTA DENTRO DE LA ACCION LOADING\n//<< QUE SERIA DE MOSTRAR EN EL HTML ATRAVEZ DE LA ETIQUETA </P> LOADING... , LUEGO CREARA UNA CAJA \n//<< CON LA ETIQUETA <DIV>  QUE HARA QUE LEA TODO LO QUE ESTA EN IMAGES Y ENVIARA A LLAMAR GIFGRIDITEM\n//<< AL CUAL LE MANDAREMOS EL KEY QUE SERIA IGUAL AL IMG.ID >>//\n//----------------------------------------------------------------------------------------------------//\n\nimport React from 'react'\nimport { useFetchGifs } from './hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n        <h3> {category} </h3>\n\n        { loading && <p className=\"cargando \">LOADING...</p> }\n\n        <div className=\"card-grid\">\n                {\n                     images.map( img =>(\n                     <GifGridItem\n                     key={img.id}\n                     {...img}\n                     />\n                     ))\n                 }\n        </div>\n        </>\n    )\n}\n//----------------------------------------------------------------------------------------------------//\n","//----------------------------------------------------------------------------------------------------//\n\n//<< LLAMADA LA FUNCION USEFETCHGIFS QUE SERIA IGUAL A LA CATEGORY, COMENZARA CON CREAR UN ESPACIO EN \n//<< MEMORIA QUE SERIA UN OBJETO QUE TENGA DENTRO DATA QUE TENDRIA UN ARREGLO VACIO Y QUE EL LOADING \n//<< SERIA TRUE, LUEGO CREARA Y EMPEZARA A CORRER EL USEEFFECT QUE LLAMARA LA PROMESA GETGIFS QUE \n//<< TENDRA DENTRO CATEGORY Y SI LA PROMESA SE CUMPLE IMGS EMPEZARA A CORRER CON LLAMAR A LA FUNCION\n//<< SETTIMEUT QUE DENTRO DE ELLA MANDARA EL SETSTATE CON EL ARREGLO DE DATA: IMGS Y EL LOADING EN \n//<< FALSE, EL TIEMPO DEL SETTIMEUT SERA DE 2 SEGUNDOS, EL \n\n//----------------------------------------------------------------------------------------------------//\n\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../funciones-especificas/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\nconst [state, setState] = useState({\n\n    data: [],\n    loading: true\n\n});\n\nuseEffect( () => {\n\n    getGifs( category )\n        .then( imgs => {\n\n            setTimeout(() => {\n            \n                setState({\n\n                    data: imgs,\n                    loading: false\n\n                }); \n\n            }, 2000);\n\n        })\n\n}, [ category ]);\n\n    return state; // { data:[]. loading: true}\n\n};\n//----------------------------------------------------------------------------------------------------//\n\n\n","//----------------------------------------------------------------------------------------------------//\n\n//<< SE LLAMA LA FUNCION GIFEXPERTAPP Y CREARA UN ESPACIO EN MEMORIA LLAMADO CATEGORIAS QUE TENDRA\n//<< DENTRO \"DRAGON BALL\" DESPUES LA FUNCION RETORNARA EN MOSTRAR ATRAVEZ DE ETIQUETAS (</>) EL TITULO\n//<< \"GIF APP\", LLAMARA A ADDCATEGORY (LE MANDARA SETCATEGORIAS A ADDCATEGORY), CREARA UNA LISTA CON \n//<< <OL></OL> LA CUAL MOSTRARA Y HARA CORRER LO QUE NOSOTROS TENGAMOS DENTRO DE NUESTRO ARREGLO DE \n//<< CATEGORIAS, Y DENTRO DE ESO LLAMAREMOS A GIFGRID Y LE MANDAREMOS EL KEY = { CATEGORY } Y DESPUES\n//<< CATEGORY = { CATEGORY } Y SERRAMOS LA LISTA ORDENA >>//\n\n//----------------------------------------------------------------------------------------------------//\n\nimport React, { useState } from 'react'\nimport { AddCategory } from './componentes/AddCategory';\nimport { GifGrid } from './componentes/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categorias = [\"One puchman\", \"Samurai X\", \"Dragon ball\" ];\n\n    const [categorias, setCategorias] = useState([\"Dragon ball\"]);\n\n//    const handleAdd = () => {\n//    setCategorias([...categorias, \"Inuyasha\"])        \n//        setCategorias(cats => [...cats, \"Inuyasha\"]);\n//    }\n\n    return (\n    <div>\n\n      <h2 className=\"nombre\">Gifs App</h2>\n      <AddCategory setCategorias={setCategorias} />\n      <hr />\n\n      <ol className=\"busqueda\">\n        {\n           categorias.map(category => (\n             <GifGrid \n             key={ category }\n             category={ category }\n             />\n           ))\n        }\n      </ol>\n\n    </div>\n    )\n}\n//----------------------------------------------------------------------------------------------------//\n","//----------------------------------------------------------------------------------------------------//\n\n//<< HARA EL RENDERIZADO CON REACTDOM Y EMPEZARA A CORRER LA APLICACION COMENZANDO CON GIFEXPERTAPP >>//\n\n//----------------------------------------------------------------------------------------------------//\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n//----------------------------------------------------------------------------------------------------//\n"],"sourceRoot":""}